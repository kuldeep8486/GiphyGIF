package com.demo.giphydemo;

import android.app.Activity;
import android.content.Intent;
import android.database.ContentObserver;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.ContactsContract;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;

import com.android.mit.mitsutils.MitsUtils;
import com.bumptech.glide.Glide;
import com.demo.ApiClient;
import com.demo.ApiInterface;
import com.demo.MyApplication;
import com.demo.classes.ConnectivityReceiver;
import com.demo.db.ContactPojo;
import com.demo.db.ContactsInstantSyncUtils;
import com.demo.pojo.FixedHeightDownsampled;
import com.demo.pojo.FixedHeightStill;
import com.demo.pojo.GiphyMainPojo;
import com.demo.pojo.GiphyPojo;
import com.demo.pojo.Images;
import com.demo.pojo.PreviewWebp;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class MainActivity extends AppCompatActivity implements ConnectivityReceiver.ConnectivityReceiverListener
{
    private Activity activity;

    private View llLoading;
    private RecyclerView rvCategories;

    private ArrayList<GiphyPojo> listImages = new ArrayList<>();

    private ImageRecyclerAdapter imageRecyclerAdapter;

    private int pageNum = 1;

    private boolean isLastPage = false;

    private static final String API_KEY = "64ff4a537c214c6dae5cb8c40b362dc1";

    public static boolean isForcefulUpdateDialogOpen = false;

    private boolean isLoading = false;
    private boolean isLoadingPending = false;

    // instant contact sync
    public static Handler handlerSync;
    private Handler customHandlerInstantSync = new Handler();
    private MyContentObserver contentObserver = new MyContentObserver();

    // pojos generated by ROBO POJO generator by ROBOHORSE

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);

        activity = this;

        pageNum = 1;

        setContentView(R.layout.activity_main);

        setupViews();

        setupRetrofit();

//        loadImagesAsync(true);

        // instant contact sync
        onclickEvents();

        activity.getApplicationContext().getContentResolver().registerContentObserver(ContactsContract.Contacts.CONTENT_URI, true, contentObserver);
    }

    private void setupViews()
    {
        llLoading = findViewById(R.id.llLoading);

        rvCategories = (RecyclerView) findViewById(R.id.rvCategories);
        GridLayoutManager layoutManager = new GridLayoutManager(activity, 2);
        rvCategories.setLayoutManager(layoutManager);

        rvCategories.addOnScrollListener(new EndlessRecyclerViewScrollListener(layoutManager)
        {
            @Override
            public void onLoadMore(int page, int totalItemsCount)
            {
                // Triggered only when new data needs to be appended to the list
                // Add whatever code is needed to append new items to the bottom of the list
                try {
                    /*if(!isLoading && !isLastPage)
                    {
                        loadImagesAsync(false);
                    }*/
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    private void setupRetrofit()
    {
        ApiInterface apiService = ApiClient.getClient().create(ApiInterface.class);

        Call<GiphyMainPojo> call = apiService.getGiphyImages(API_KEY, "25");
        call.enqueue(new Callback<GiphyMainPojo>()
        {
            @Override
            public void onResponse(Call<GiphyMainPojo> call, Response<GiphyMainPojo> response)
            {
                listImages = response.body().getListGiphyPojo();
                Log.d("Giphy response", "Size : " + listImages.size());
                llLoading.setVisibility(View.GONE);

                imageRecyclerAdapter = new ImageRecyclerAdapter(listImages);
                rvCategories.setAdapter(imageRecyclerAdapter);
            }

            @Override
            public void onFailure(Call<GiphyMainPojo> call, Throwable t) {
                // Log error here since request failed
                Log.e("Giphy response", "failed : " + t.toString());
            }
        });
    }

    private void loadImagesAsync(final boolean isFirstTime)
    {
        try
        {
            new AsyncTask<Void, Void, Void>()
            {
                @Override
                protected void onPreExecute()
                {
                    isLoading = true;
                    if(isFirstTime)
                    {
                        listImages = new ArrayList<>();
                        llLoading.setVisibility(View.VISIBLE);
                    }
                    super.onPreExecute();
                }

                @Override
                protected Void doInBackground(Void... params)
                {
                    try
                    {
                        String URL = "https://api.giphy.com/v1/gifs/trending?api_key=" + API_KEY + "&limit=25";

                        String response = MitsUtils.readJSONServiceUsingGET(URL);

//                        Log.v("API RESPONSE", response + "***");

                        JSONObject jsonObject = new JSONObject(response);
                        JSONArray jsonArray = jsonObject.getJSONArray("data");

                        pageNum = pageNum + 1;

                        if(jsonArray.length() < 25)
                        {
                            isLastPage = true;
                        }

                        for(int i=0; i<jsonArray.length(); i++)
                        {
                            JSONObject jsonObjectChild = jsonArray.getJSONObject(i);
                            String imageId = Utils.getValidAPIStringResponse(jsonObjectChild.getString("id"));

                            JSONObject jsonObjectImage = jsonObjectChild.getJSONObject("images");

                            JSONObject jsonObjectThumb = jsonObjectImage.getJSONObject("preview_webp");
                            String thumbPath = Utils.getValidAPIStringResponse(jsonObjectThumb.getString("url"));

                            JSONObject jsonObjectGif = jsonObjectImage.getJSONObject("fixed_height_downsampled");
                            String imagePath = Utils.getValidAPIStringResponse(jsonObjectGif.getString("url"));

                            JSONObject jsonObjectStill = jsonObjectImage.getJSONObject("fixed_height_still");
                            String detailThumb = Utils.getValidAPIStringResponse(jsonObjectStill.getString("url"));

                            GiphyPojo giphyPojo = new GiphyPojo();
                            giphyPojo.setId(imageId);

                            Images images = new Images();
                            PreviewWebp previewWebp = new PreviewWebp();
                            previewWebp.setUrl(thumbPath);
                            images.setPreviewWebp(previewWebp);

                            FixedHeightDownsampled fixedHeightDownsampled = new FixedHeightDownsampled();
                            fixedHeightDownsampled.setUrl(imagePath);
                            images.setFixedHeightDownsampled(fixedHeightDownsampled);

                            FixedHeightStill fixedHeightStill = new FixedHeightStill();
                            fixedHeightStill.setUrl(detailThumb);
                            images.setFixedHeightStill(fixedHeightStill);

                            giphyPojo.setImages(images);

                            listImages.add(giphyPojo);
                        }
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                    }
                    return null;
                }

                @Override
                protected void onPostExecute(Void result)
                {
                    super.onPostExecute(result);

                    try {
                        isLoading = false;

                        if(isFirstTime)
                        {
                            llLoading.setVisibility(View.GONE);

                            /*imageRecyclerAdapter = new ImageRecyclerAdapter(listImages);
                            rvCategories.setAdapter(imageRecyclerAdapter);*/
                        }
                        else
                        {
                            imageRecyclerAdapter.notifyDataSetChanged();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, (Void)null);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    public class ImageRecyclerAdapter extends RecyclerView.Adapter<ImageRecyclerAdapter.ViewHolder>
    {
        public ArrayList<GiphyPojo> items;

        ImageRecyclerAdapter(ArrayList<GiphyPojo> list)
        {
            this.items = list;
        }

        @Override
        public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i)
        {
            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.rowview_image, viewGroup, false);

            return new ViewHolder(v);
        }

        public class ViewHolder extends RecyclerView.ViewHolder
        {
            final ImageView ivImage;

            ViewHolder(View convertView)
            {
                super(convertView);
                ivImage = (ImageView) convertView.findViewById(R.id.ivImage);
            }
        }

        @Override
        public void onBindViewHolder(final ViewHolder holder, final int position)
        {
            final GiphyPojo giphyPojo = items.get(position);

            final String url = giphyPojo.getImages().getFixedHeightDownsampled().getUrl();
            if(url != null && url.length() > 0)
            {
                Glide.with(activity)
                        .load(url)
                        .asGif()
                        .centerCrop()
                        .crossFade()
                        .into(holder.ivImage);
            }
            else
            {
                Glide.with(activity)
                        .load(R.mipmap.ic_launcher)
                        .into(holder.ivImage);
            }

            holder.itemView.setOnClickListener(new View.OnClickListener()
            {
                @Override
                public void onClick(View v)
                {
                    try
                    {
                        Intent intent = new Intent(activity, ImageSliderActivity.class);
                        intent.putExtra("imagePath", url);
                        intent.putExtra("imageId", giphyPojo.getId());
                        activity.startActivity(intent);
                    }
                    catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
        }

        @Override
        public int getItemCount() {
            return items.size();
        }
    }

    @Override
    public void onResume()
    {
        super.onResume();
        MyApplication.getInstance().setConnectivityListener(this);
    }

    @Override
    public void onNetworkConnectionChanged(boolean isConnected)
    {
        try {
            if(isConnected)
            {
                if(isLoadingPending && !isLoading)
                {
                    loadImagesAsync(true);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // instant contact sync
    private void onclickEvents()
    {
        handlerSync = new Handler(new android.os.Handler.Callback()
        {
            @Override
            public boolean handleMessage(Message msg)
            {
                try {
                    if(msg.what == 100)
                    {
                        ContactsInstantSyncUtils contactsInstantSyncUtils = new ContactsInstantSyncUtils(activity);
                        contactsInstantSyncUtils.saveContactInformation();
                    }
                    else if(msg.what == 200)
                    {
                        ArrayList<ArrayList<ContactPojo>> listFriendsMainUpdated = (ArrayList<ArrayList<ContactPojo>>) msg.obj;
                        ArrayList<ContactPojo> listUpdated = listFriendsMainUpdated.get(0);
                        ArrayList<ContactPojo> listDeleted = listFriendsMainUpdated.get(1);
                        ArrayList<ContactPojo> listAdded = listFriendsMainUpdated.get(2);
                        if(listUpdated == null)
                        {
                            listUpdated = new ArrayList<>();
                        }
                        if(listDeleted == null)
                        {
                            listDeleted = new ArrayList<>();
                        }
                        if(listAdded == null)
                        {
                            listAdded = new ArrayList<>();
                        }

//                        updateDataInstantCall(listFriendsMainUpdated);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return false;
            }
        });
    }

    private Runnable updateTimerThreadSync = new Runnable()
    {
        public void run()
        {
            try {
                if(ContactsInstantSyncUtils.isSaveContactInfoRunning)
                {
                    customHandlerInstantSync.postDelayed(updateTimerThreadSync, 1000);
                }
                else
                {
                    customHandlerInstantSync.removeCallbacks(updateTimerThreadSync);

                    if(handlerSync != null)
                    {
                        Message message = Message.obtain();
                        message.what = 100;
                        handlerSync.sendMessage(message);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };

    private class MyContentObserver extends ContentObserver
    {
        public MyContentObserver()
        {
            super(null);
        }

        @Override
        public boolean deliverSelfNotifications() {
            return true;
        }

        @Override
        public void onChange(boolean selfChange)
        {
            super.onChange(selfChange);
            Log.v("observer onchange", "called, selfchange = " + selfChange);
            try {
                if(ContactsInstantSyncUtils.isSaveContactInfoRunning)
                {
                    customHandlerInstantSync.postDelayed(updateTimerThreadSync, 1000);
                }
                else
                {
                    if(handlerSync != null)
                    {
                        Message message = Message.obtain();
                        message.what = 100;
                        handlerSync.sendMessage(message);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
